/**************************************************************************
*                      К  У  Р  С      О  О  П                            *
*-------------------------------------------------------------------------*
*                                                                         *
* Project Name  : \Курсы_С++\Lesson_05_Принципы _ООП\Ex05_04_Con_Virt     *
* Project Type  : Win32 Console application                               *
* File Name     : Point05_04.cpp                                          *
* Language      : Visual C++           MS VS 2015                         *
* Programmer(s) : Чечиков Ю.Б.  &   Безродных И.П.                        *
* Modified By   : Чечиков Ю.Б.                                            *
* Created       : 28 / 04 / 2004                                          *
* Last Revision : 06 / 01 / 2016                                          *
* Comment(s)    : ОБЪЯВЛЕНИЕ ТРЕХ КЛАССОВ. НАСЛЕДОВАНИЕ                   *
*                 ВИРТУАЛЬНЫЕ ФУНКЦИИ В Point                             *
*                 ПОЗДНЕЕ СВЯЗЫВАНИЕ                                      *
*                 БУКСИРОВКА ЛЮБОЙ ФИГУРЫ                                 *
*                                                                         *
**************************************************************************/

#include<windows.h>
#include "Point05_03.h"	//объявление классов

/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
/*   Г Л О Б А Л Ь Н Ы Е   П Е Р Е М Е Н Н Ы Е  И  К О Н С Т А Н Т Ы   */
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
//глобальная переменная видна в двух файлах:
// Point05_04.cpp и Ex05_04_Con_Virt.cpp
//внешнее обявление глобальной переменной
extern HDC hdc;      // объявим  контекст устройства

// Макрос для проверки состояния клавиатуры – из ШАБЛОНА
#define KEY_DOWN(vk_code) ((GetAsyncKeyState(vk_code) & 0x8000) ? 1 : 0)

/*----------------------------------------------------------------*/
/*             Р Е А Л И З А Ц И Я    М Е Т О Д О В               */
/*----------------------------------------------------------------*/

/*-----------------------------------------------------------------------*/
/*        МЕТОДЫ КЛАССА Location          */
/*----------------------------------------*/
//конструктор
Location::Location(int InitX, int InitY)
{
	//инициализация закрытых переменных своего класса
	X = InitX;
	Y = InitY;
};//end Location::Location()

  //деструктор
Location::~Location(void)  //формально пустое тело
{
};//end Location::~Location()

  //получить X координату точки
int Location::GetX(void)
{
	return X;
};//end Location::GetX()	

  //получить Y координату точки
int Location::GetY(void)
{
	return Y;
}; //end Location::GetY()


/*-----------------------------------------------------------------------*/
/*        МЕТОДЫ КЛАССА Point             */
/*----------------------------------------*/
//конструктор
//для инициализации закрытых полей используем конструктор предка
Point::Point(int InitX, int InitY) : Location(InitX, InitY)
{
	//инициализация закрытых переменных своего класса
	Visible = false;
}//end Point::Point()

 //--------------------------------------------------------------
 //деструктор
Point::~Point(void)   //формально пустое тело
{
}//end Point::~Point()

 //--------------------------------------------------------------
 //показать ТОЧКУ
void Point::Show(void)
{
	Visible = true;
	SetPixel(hdc, X, Y, RGB(255, 0, 0));	//рисуем красным цветом
	SetPixel(hdc, X + 1, Y, RGB(255, 0, 0));	// 4 точки для удобства
	SetPixel(hdc, X, Y + 1, RGB(255, 0, 0));
	SetPixel(hdc, X + 1, Y + 1, RGB(255, 0, 0));
}//end Point::Show()

 //--------------------------------------------------------------
 //скрыть ТОЧКУ
void Point::Hide(void)
{
	Visible = false;

	SetPixel(hdc, X, Y, RGB(0, 0, 255));//рисуем синим цветом или фона
	SetPixel(hdc, X + 1, Y, RGB(0, 0, 255));
	SetPixel(hdc, X, Y + 1, RGB(0, 0, 255));
	SetPixel(hdc, X + 1, Y + 1, RGB(0, 0, 255));
}//end Point::Hide()

 //--------------------------------------------------------------
 //узнать про светимость ТОЧКИ
bool Point::IsVisible(void)
{
	return Visible;
};//end Point::IsVisible()

//--------------------------------------------------------------
//переместить ТОЧКУ
void Point::MoveTo(int NewX, int NewY)
{
	Hide();		//сделать точку невидимой
	X = NewX;	//поменять координаты ТОЧКИ
	Y = NewY;
	Show();		//показать точку на новом месте
};//end Point::MoveTo()

  //-------------------------------------------------------------------
void Point::Drag(int Step)    //буксировка фигуры
{
	int FigX, FigY;   //новые координаты фигуры

	FigX = GetX();    //получаем начальное положение фигуры
	FigY = GetY();

	while (1)	//бесконечный цикл буксировки фигуры
	{
		if (KEY_DOWN(VK_ESCAPE))     //конец работы 27
			break;

		//направление движения объекта

		if (KEY_DOWN(VK_LEFT)) //стрелка влево  37
		{
			FigX -= Step;
			MoveTo(FigX, FigY);
			Sleep(500);
		}//end if

		if (KEY_DOWN(VK_RIGHT)) //стрелка вправо  39
		{
			FigX += Step;
			MoveTo(FigX, FigY);
			Sleep(500);
		}//end if

		if (KEY_DOWN(VK_DOWN)) //стрелка вниз  40
		{
			FigY += Step;
			MoveTo(FigX, FigY);
			Sleep(500);
		}//end if

		if (KEY_DOWN(VK_UP)) //стрелка вверх  38
		{
			FigY -= Step;
			MoveTo(FigX, FigY);
			Sleep(500);
		}//end if
	}   //while
}//end Drag()

/*-----------------------------------------------------------------------*/
/*        МЕТОДЫ КЛАССА Circle            */
/*----------------------------------------*/
//для инициализации закрытых полей используем конструктор предка
Circle::Circle(int InitX, int InitY, int InitRadius) :Point(InitX, InitY)
{
	//инициализация закрытых переменных своего класса
	Radius = InitRadius;
}//end Circle::Circle ()

//-------------------------------------------------------------------
Circle::~Circle(void)  //формально пустое тело
{
};//end Circle::~Circle ()

//-------------------------------------------------------------------
void Circle::Show(void)
{
	Visible = true;

	// Зададим перо и цвет пера - красный
	HPEN Pen = CreatePen(PS_SOLID, 2, RGB(255, 0, 0));
	SelectObject(hdc, Pen);	//сделаем перо активным

	// Нарисуем круг установленным цветом
	Ellipse(hdc, X - Radius, Y - Radius, X + Radius, Y + Radius);

	// Уничтожим нами созданные объекты  
	DeleteObject(Pen);

} // end Circle::Show()

//-------------------------------------------------------------------
void Circle::Hide(void)
{
	Visible = false;

	// Зададим перо и цвет пера
	HPEN Pen = ::CreatePen(PS_SOLID, 2, RGB(0, 0, 255)); //синий
	//	HPEN Pen=::CreatePen(PS_SOLID,2,RGB(255,255,255));
	SelectObject(hdc, Pen);

	// Нарисуем круг установленным цветом
	Ellipse(hdc, X - Radius, Y - Radius, X + Radius, Y + Radius);

	// Уничтожим нами созданные объекты  
	DeleteObject(Pen);

}// end Circle::Hide()

//-------------------------------------------------------------------
/* можно  УБРАТЬ благодаря виртуальным функциям    !!
void Circle::MoveTo(int NewX, int NewY)  //берем из Point
{
	Hide();  //стирание старой окружности
	X= NewX; //поменять координаты
	Y= NewY;
	Show();  //показать окружность на новом месте
}//end Circle::MoveTo()
*/
//-------------------------------------------------------------------
void Circle::Expand(int DeltaRad)
{
	Hide();             //спрятать окружность со старым радиусом
	Radius += DeltaRad; //изменить радиус 
	if (Radius < 0)     //для отрицательного приращения радиуса
		Radius = 5;
	Show();             //показать окружность с новым радиусом
}//end Circle::Expand ()

//---------------------------------------------------------------
void Circle::Reduce(int DeltaRad)
{
	Expand(-DeltaRad); //отрицательное приращение радиуса
}//end Circle::Reduce ()


/**************   End of File Point05_04.СPP   ********************/
